library(ggplot2)
library(dplyr)
data(diamonds)
summary(diamonds)
clarity_groups <- group_by(diamonds, clarity)
diamondsByClarity <- diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n()) %>%
arrange(clarity)
diamondsByClarity <- diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price)*1.,
min_price = min(price),
max_price = max(price),
n = n()) %>%
arrange(clarity)
```
View(clarity_groups)
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
View(diamondsByClarity)
?geom_histogram
p1 <- ggplot(data=diamonds_mp_by_clarity, aes(x=clarity)) + geom_histogram()
p1
?gridExtra
??gridExtra
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
p1 <- ggplot(data=diamonds_mp_by_clarity, aes(x=clarity)) + geom_histogram()
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
p2 <- ggplot(data=diamonds_mp_by_clarity, aes(x=cut)) + geom_histogram()
library(gridExtra)
grid.arrange(p1,p2, ncol=1)
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
p2 <- ggplot(data=diamonds_mp_by_color, aes(x=color)) + geom_histogram()
library(gridExtra)
grid.arrange(p1,p2, ncol=1)
?geom_histogram
p1 <- ggplot(data=diamonds_mp_by_clarity, aes(x=clarity)) + geom_histogram(weight=price)
p1 <- ggplot(data=diamonds_mp_by_clarity, aes(x=clarity)) + geom_histogram(weight=diamonds$price)
p2 <- ggplot(data=diamonds_mp_by_color, aes(x=color)) + geom_histogram(weight=diamonds$price)
grid.arrange(p1,p2, ncol=1)
p1
p2
p1 <- ggplot(data=diamonds_mp_by_clarity, aes(x=clarity)) + geom_histogram(aes(weight=price))
p2 <- ggplot(data=diamonds_mp_by_color, aes(x=color)) + geom_histogram(aes(weight=price))
grid.arrange(p1,p2, ncol=1)
p1 <- ggplot(data=diamonds_mp_by_clarity, aes(x=clarity)) + geom_histogram(aes(weight=mean_price))
p2 <- ggplot(data=diamonds_mp_by_color, aes(x=color)) + geom_histogram(aes(weight=mean_price))
grid.arrange(p1,p2, ncol=1)
p2 <- qplot(color, data=diamonds_mp_by_color, geom ="bar", weight=mean_price)
grid.arrange(p1,p2, ncol=1)
?diamonds
diamonds_by_cut <- group_by(diamonds, cut)
diamonds_mp_by_cut <- summarise(diamonds_by_cut, mean_price = mean(price))
p3 <- qplot(cut, data=diamonds_mp_by_cut, geom ="bar", weight=mean_price)
grid.arrange(p1,p2,p3 ncol=1)
grid.arrange(p1,p2,p3, ncol=1)
bye()
exit
quit
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
library(gridExtra)
plot1 <- qplot(price, diamonds) + ggtitle('Price')
data(diamonds)
plot1 <- qplot(price, diamonds) + ggtitle('Price')
summary(diamonds)
plot1 <- qplot(price, diamonds) + ggtitle('Price')
rm(plot1)
plot1 <- qplot(price, diamonds) + ggtitle('Price')
plot2 <- plot1 + ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
plot2 <- qplot(price, diamonds) + ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
View(diamonds)
plot1 <- ggplot(aes(price), diamonds) + geom_histogram() + ggtitle('Price')
plot1 <- ggplot(aes(price), data = diamonds) + geom_histogram() + ggtitle('Price')
plot2 <- ggplot(aes(price), data = diamonds) + geom_histogram() + scale_y_log10() + ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
plot1 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=100) + ggtitle('Price')
grid.arrange(plot1, plot2, ncol=2)
plot1 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=250) + ggtitle('Price')
grid.arrange(plot1, plot2, ncol=2)
plot1 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=500) + ggtitle('Price')
grid.arrange(plot1, plot2, ncol=2)
plot1 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=50) + ggtitle('Price')
grid.arrange(plot1, plot2, ncol=2)
plot1 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=200) + ggtitle('Price')
grid.arrange(plot1, plot2, ncol=2)
plot1 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=250) + ggtitle('Price')
grid.arrange(plot1, plot2, ncol=2)
plot1 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=500) + ggtitle('Price')
grid.arrange(plot1, plot2, ncol=2)
plot1 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=1000) + ggtitle('Price')
grid.arrange(plot1, plot2, ncol=2)
plot1 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=2500) + ggtitle('Price')
grid.arrange(plot1, plot2, ncol=2)
plot2 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=2500) + scale_y_log10() + ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
plot2 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=500) + scale_y_log10() + ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
plot2 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=100) + scale_y_log10() + ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
plot2 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=50) + scale_y_log10() + ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
plot2 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=200) + scale_y_log10() + ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
plot2 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=250) + scale_y_log10() + ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
plot2 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=100) + scale_y_log10() + ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
plot1 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=500) + ggtitle('Price')
plot2 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=100) + scale_y_log10() + ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
plot1 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=100) + ggtitle('Price')
plot2 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=100) + scale_y_log10() + ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
plot1 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=200) + ggtitle('Price')
plot2 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=100) + scale_y_log10() + ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
plot1 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=500) + ggtitle('Price')
plot2 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=100) + scale_y_log10() + ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
plot1 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=100) + ggtitle('Price')
plot2 <- ggplot(aes(price), data = diamonds) + geom_histogram(binwidth=.01) + scale_y_log10() + ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
?trans_new
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
head(sort(table(diamonds$carat), decreasing = TRUE))
?sort
head(sort(table(diamonds$carat), decreasing = FALSE))
TRUE
head(sort(table(diamonds$carat), decreasing = TRUE))
head(sort(table(diamonds$price), decreasing = TRUE))
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=.5, size=.75, postion=position_jitter) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color", reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
guide = guide_legend(title = "Color",
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color",
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color",
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
?diamonds
View(cuberoot_trans)
diamonds <- load("BigDiamonds.rda")
diamonds <- load("BigDiamonds.rda")
setwd("~/RProjects/EDA_Course_Materials/lesson6")
setwd("~/RProjects/EDA_Course_Materials/lesson6")
diamonds <- load("BigDiamonds.rda")
View(diamondsbig)
diamonds<-diamondsbig
ggplot(aes(carat,price), data=diamonds) + geom_point(position=position_jitter(h=0)) + ylim(250, quantile(diamonds$price, .99)) + xlim(0, quantile(diamonds$carat, .99))
ggplot(aes(carat,price), data=diamonds) + geom_point(position=position_jitter(h=0))
ggplot(aes(carat,price), data=diamonds) + geom_point(position=position_jitter(h=0))
```
load("BigDiamonds.rda")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig[diamondsbig$price <10000 & diamondsbig$cert == "GIA",])
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
View(thisDiamond)
View(modelEstimate)
?predict
exp(modelEstimate)
?exp
?predict
View(thisDiamond)
?exp
?view
?View
View(mtcars)
library(ggplot2)
qplot(x=dob_day, data=pf) + scale_x_discrete(breaks=1:31)
pf <- read.csv('pseudo_facebook.tsv', sep ='\t')
names(pf)
setwd("~/RProjects/exploratory_data_analysis/lesson3")
pf <- read.csv('pseudo_facebook.tsv', sep ='\t')
names(pf)
library(ggplot2)
qplot(x=dob_day, data=pf) + scale_x_discrete(breaks=1:31)
qplot(x=dob_day, data=pf, binwidth=1) + facet_wrap(~dob_month, ncol=4)
```{r}
ggplot(aes(carat,price), data=diamonds) + geom_point(position=position_jitter(h=0)) + ylim(250, quantile(diamonds$price, .99)) + xlim(0, quantile(diamonds$carat, .99))
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(RColorBrewer)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
setwd("~/RProjects/exploratory_data_analysis/lesson3")
df <-read.csv('birthdaysExample.csv')
df$month <- strftime(strptime(df$dates, format="%m/%d/%y"),"%m")
df$day <- strftime(strptime(df$dates, format="%m/%d/%y"),"%d")
View(df)
?count
df.fc_by_birthday <- df %>%
group_by(month,day) %>%
summarise(n=n()) %>%
arrange(month)
View(df)
library(dplyr)
df.fc_by_birthday <- df %>%
group_by(month,day) %>%
summarise(n=n()) %>%
arrange(month)
View(df.fc_by_birthday)
df.fc_by_birthday <- df %>%
group_by(month) %>%
summarise(n=n()) %>%
arrange(month)
View(df.fc_by_birthday)
View(df)
str(df)
dim(subset(df, df$month=="05" & df$day =="16"))
length(subset(df, df$month=="05" & df$day =="16"))
a <- (subset(df, df$month=="05" & df$day =="16"))
View(a)
length(subset(df, df$month=="05" & df$day =="16"))
dim(subset(df, df$month=="05" & df$day =="16"))[1]
dim(subset(df, df$month=="05" & df$day =="16"))[1], "birthdays"
dim(subset(df, df$month=="01" & df$day =="01"))[1]
View(df.fc_by_birthday)
View(df.fc_by_birthday)
df[df.fc_by_birthmonth==max(df.fc_by_birthmonth )]$month
df.fc_by_birthmonth[df.fc_by_birthmonth==max(df.fc_by_birthmonth )]$month
df.fc_by_birthmonth[month==max(n)]$month
df.fc_by_birthmonth
df.fc_by_birthmonth <- df %>%
group_by(month) %>%
summarise(n=n()) %>%
arrange(month)
h[month==max(n)]$month
View(df.fc_by_birthmonth)
df.fc_by_birthmonth[df.fc_by_birthmonth$month==max(df.fc_by_birthmonth$n)]$month
df.fc_by_birthmonth$n
df.fc_by_birthmonth[df.fc_by_birthmonth$n==max(df.fc_by_birthmonth$n)]$month
df.fc_by_birthmonth[df.fc_by_birthmonth$n==max(df.fc_by_birthmonth$n)]$month
```{r}
df.fc_by_birthmonth[df.fc_by_birthmonth$n==max(df.fc_by_birthmonth$n)]$month
max(df.fc_by_birthmonth$n)
df.fc_by_birthmonth$n
subset(df.fc_by_birthmonth, df.fc_by_birthmonth$n==max(df.fc_by_birthmonth$n))$month
df.fc_by_birthmonth
df.fc_by_birthday <- df %>%
group_by(month, age) %>%
summarise(total_birthdays=n()) %>%
arrange(month)
subset(df.fc_by_birtday, df.fc_by_birthmonth$n==max(df.fc_by_birthmonth$n) & df.fc_by_birthday$n==max(df.fc_by_birthday)$n)
df.fc_by_birthday <- df %>%
group_by(month, day) %>%
summarise(total_birthdays=n()) %>%
arrange(month)
subset(df.fc_by_birtday, df.fc_by_birthmonth$n==max(df.fc_by_birthmonth$n) & df.fc_by_birthday$n==max(df.fc_by_birthday)$n)
df.fc_by_birthday <- df %>%
group_by(month, day) %>%
summarise(total_birthdays=n()) %>%
arrange(month)
View(df.fc_by_birthday)
df.fc_by_birthday <- df %>%
group_by(month, day) %>%
summarise(total_birthdays=n()) %>%
arrange(month, day)
View(df.fc_by_birthday)
subset(df.fc_by_birtday, df.fc_by_birthday$n==max(df.fc_by_birthday$n))
df.fc_by_birthday <- df %>%
group_by(month, day) %>%
summarise(n=n()) %>%
arrange(month, day)
subset(df.fc_by_birthday, df.fc_by_birthday$n==max(df.fc_by_birthday$n))
setwd("~/RProjects/exploratory_data_analysis/lesson4")
??ggplot2
ggplot(aes(Month, Temp), data=Mitchell) + geom_point() + scale_x_discrete(breaks = seq(0,203,12)) + coord_fixed(ratio=10)
library(alr3)
data("Mitchell")
ggplot(aes(Month, Temp), data=Mitchell) + geom_point()
ggplot(aes(Month, Temp), data=Mitchell) + geom_point() + scale_x_discrete(breaks = seq(0,203,12)) + coord_fixed(ratio=.1)
ggplot(aes(Month, Temp), data=Mitchell) + geom_point() + scale_x_discrete(breaks = seq(0,203,12)) + coord_fixed(ratio=.5)
ggplot(aes(Month, Temp), data=Mitchell) + geom_point() + scale_x_discrete(breaks = seq(0,203,12)) + coord_fixed(ratio=.75)
ggplot(aes(Month, Temp), data=Mitchell) + geom_point() + scale_x_discrete(breaks = seq(0,203,12)) + coord_fixed(ratio=.8)
ggplot(aes(Month, Temp), data=Mitchell) + geom_point() + scale_x_discrete(breaks = seq(0,203,12)) + coord_fixed(ratio=.6)
ggplot(aes(Month, Temp), data=Mitchell) + geom_point() + scale_x_discrete(breaks = seq(0,203,12)) + coord_fixed(ratio=.5)
```
?detach
?count
detach("plyr")
library("plyr")
detach("plyr")
detach("plyr", TRUE)
detach("package:plyr", TRUE)
